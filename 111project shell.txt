Создать двух пользователей (с помощью метода User.objects.create_user).
импортируем модель

from NewsPaper.models import User

user1 = User.objects.create_user('Kirill lucenko')
user2 = User.objects.create_user('Dmitrii Rasskazov')



Создать два объекта модели Author, связанные с пользователями.


from NewsPaper.models import Author

Author.objects.create(author = user1)
Author.objects.create(author = user2)



Добавить 4 категории в модель Category.


from NewsPaper.models import Category
Category.objects.create(article_category = 'sport') # (id=1)
Category.objects.create(article_category = 'politics')
Category.objects.create(article_category = 'education')
Category.objects.create(article_category = 'culture')# (id=4)



Добавить 2 статьи и 1 новость.



from NewsPaper.models import *
from NewsPaper.models import Post
author = Author.objects.get(id=1)
 
# <Post: Post object (1)>
Post.objects.create(
... post_author = author,
... category = 'A',
... title = 'The Record',
... content = 'Long text'
... )


# <Post: Post object (2)>
Post.objects.create(
... post_author = author,
... category = 'A',
... title = 'The Magic',
... content = 'Not very long story'
... )
<Post: The Magic: Not very long story>


# <Post: Post object (3)>
Post.objects.create(
... post_author = author,
... category = 'N',
... title = 'Some news',
... content = 'We have launched a new project'
... )



Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).



Post.objects.get(id=3).post_category.add(Category.objects.get(id=1)) 
Post.objects.get(id=3).post_category.add(Category.objects.get(id=4))



Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).



Comment.objects.create(
                      comment_post=Post.objects.get(id=3),
                      comment_user=Author.objects.get(id=1).author, 
                      feedback_text = 'Very interesting article'
                      )

Comment.objects.create(
                      comment_post=Post.objects.get(id=4), 
                      comment_user = Author.objects.get(id=1).author,
                      feedback_text = 'cool!'
                      )


Comment.objects.create(
                      comment_post = Post.objects.get(id=5), 
                      comment_user = Author.objects.get(id=2).author,
                      feedback_text = "Wow, that's amazing"
                      )


Comment.objects.create(
                      comment_post=Post.objects.get(id=5), 
                      comment_user = Author.objects.get(id=2).author,
                      feedback_text = 'This is excellent'
                      )



Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.



Comment.objects.get(id=3).like() 
Post.objects.get(id=3).dislike() 
Post.objects.get(id=3).like()
Comment.objects.get(id=1).comment_rate
Post.objects.get(id=3).post_rate



Обновить рейтинги пользователей.



u1 = Author.objects.get(id=1)
u1.update_rating()
u1.user_rate
u2 = Author.objects.get(id=2)
u2.author.comment_set.aggregate(comment_rating=Sum('comment_rate'))
u2.update_rating()
u2.user_rate




Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).



>>> s = Author.objects.order_by('user_rate')
>>> for i in s:
...     i.user_rate
...     i.author.username
... 
0
'Kirill lucenko'
1
'Dmitrii Rasskazov'



Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.



p = Post.objects.order_by('-post_rate')
for i in p[:1]:
...     i.date_created
...     i.post_author.author
...     i.post_rate
...     i.title
...     i.preview()



Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.



>>> Post.objects.all().order_by('-post_rate')[0].comment_set.values(
... 'comment_date_created', 
... 'comment_user',
... 'comment_rate', 'feedback_text'
... )
<QuerySet [{'comment_date_created': datetime.date(2023, 3, 14), 'comment_user': 4, 'comment_rate': 0, 'feedback_text': 'Very interesting article'}]>